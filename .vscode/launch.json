{
  // 使用 IntelliSense 了解相关属性。 
  // 悬停以查看现有属性的描述。
  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    
    /** ------------------------主站------------------------*/
    // 最小的k个数
    {
      "type": "node",
      "request": "launch",
      "name": "getLeastNumbers",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\getLeastNumbers.js"
    },
    // 数组中出现次数超过一半的数字
    {
      "type": "node",
      "request": "launch",
      "name": "majorityElement",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\majorityElement.js"
    },
    // 调整数组顺序使奇数位于偶数前面
    {
      "type": "node",
      "request": "launch",
      "name": "exchange",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\exchange.js"
    },
    // 打印从1到最大的n位数
    {
      "type": "node",
      "request": "launch",
      "name": "printNumbers",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\printNumbers.js"
    },
    // 青蛙跳台阶问题
    {
      "type": "node",
      "request": "launch",
      "name": "numWays",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\numWays.js"
    },
    // 斐波那契数列
    {
      "type": "node",
      "request": "launch",
      "name": "fibonacci",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\fibonacci.js"
    },
    // 数组中重复的数字
    {
      "type": "node",
      "request": "launch",
      "name": "findRepeatNumber",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\findRepeatNumber.js"
    },
    // 2的幂
    {
      "type": "node",
      "request": "launch",
      "name": "isPowerOfTwo",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\isPowerOfTwo.js"
    },
    // 位1的个数
    {
      "type": "node",
      "request": "launch",
      "name": "hammingWeight",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/hammingWeight.js"
    },
    // x 的平方根
    {
      "type": "node",
      "request": "launch",
      "name": "mySqrt",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/mySqrt.js"
    },
    // 有效的数独
    {
      "type": "node",
      "request": "launch",
      "name": "isValidSudoku",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/isValidSudoku.js"
    },
    // 生成有效括号组合
    {
      "type": "node",
      "request": "launch",
      "name": "generateParenthesis",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/generateParenthesis.js"
    },
    // 众数
    {
      "type": "node",
      "request": "launch",
      "name": "majority",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/majority.js"
    },
    // 2的n次方
    {
      "type": "node",
      "request": "launch",
      "name": "pow",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/pow.js"
    },
    // 买卖股票的最佳时机 II
    {
      "type": "node",
      "request": "launch",
      "name": "maxProfit",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/maxProfit.js"
    },
    // 多数元素
    {
      "type": "node",
      "request": "launch",
      "name": "majorityElement",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/169.majorityElement.js"
    },
    // 计算 x 的 n 次幂函数
    {
      "type": "node",
      "request": "launch",
      "name": "myPow",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/50.myPow.js"
    },
    // 验证二叉搜索树
    {
      "type": "node",
      "request": "launch",
      "name": "isValidBST",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/98.isValidBST.js"
    },
    // 1.两数之和
    {
      "type": "node",
      "request": "launch",
      "name": "twoSum",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/1.twoSum.js"
    },
    // 242.有效的括号
    {
      "type": "node",
      "request": "launch",
      "name": "isAnagram",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/242.isAnagram.js"
    },
    // 20.有效的括号
    {
      "type": "node",
      "request": "launch",
      "name": "isValid",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/20.isValid.js"
    },
    // 141.环形链表
    {
      "type": "node",
      "request": "launch",
      "name": "hasCycle",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/141.hasCycle.js"
    },
    // 24.两两交换链表中的节点
    {
      "type": "node",
      "request": "launch",
      "name": "swapPairs",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/24.swapPairs.js"
    },
    // 206.反转链表
    {
      "type": "node",
      "request": "launch",
      "name": "reverseList",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/206.reverseList.js"
    },
    /** ------------------------二叉树------------------------*/
    // 对称的二叉树
    {
      "type": "node",
      "request": "launch",
      "name": "isSymmetric",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/tree/isSymmetric.js"
    },
    // 二叉树的镜像
    {
      "type": "node",
      "request": "launch",
      "name": "mirrorTree",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/tree/mirrorTree.js"
    },
    // 最小深度
    {
      "type": "node",
      "request": "launch",
      "name": "minDepth",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/tree/minDepth.js"
    },
    // 最大深度
    {
      "type": "node",
      "request": "launch",
      "name": "maxDepth",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/tree/maxDepth.js"
    },
    
    /** ------------------------链表------------------------*/
    // 合并两个排序的链表
    {
      "type": "node",
      "request": "launch",
      "name": "mergeTwoLists",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/linkList/mergeTwoLists.js"
    },
    // 从尾到头打印链表
    {
      "type": "node",
      "request": "launch",
      "name": "reversePrint",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/linkList/reversePrint.js"
    },
    
    
    // 删除链表的节点
    {
      "type": "node",
      "request": "launch",
      "name": "deleteNode",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/linkList/deleteNode.js"
    },
  ]
}