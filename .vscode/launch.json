{
  // 使用 IntelliSense 了解相关属性。 
  // 悬停以查看现有属性的描述。
  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    /** ------------------------其他------------------------*/
    // 扁平数组树形化
    {
      "type": "node",
      "request": "launch",
      "name": "arrayToTree",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\other/arrayToTree.js"
    },
    // 树形结构数组扁平化
    {
      "type": "node",
      "request": "launch",
      "name": "treeToArray",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\other/treeToArray.js"
    },
    // 过滤树节点
    {
      "type": "node",
      "request": "launch",
      "name": "filterTree",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\other/filterTree.js"
    },
    // 深度遍历二叉树
    {
      "type": "node",
      "request": "launch",
      "name": "dfs",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\other/dfs.js"
    },
    // 实现add函数使得一下表达式的值正确
    {
      "type": "node",
      "request": "launch",
      "name": "add",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\other/add.js"
    },
    /** ------------------------剑指offer------------------------*/
    // 58-ii.左旋转字符串
    {
      "type": "node",
      "request": "launch",
      "name": "reverseLeftWords",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/58-ii.reverseLeftWords.js"
    },
    // 57.和为s的两个数字
    {
      "type": "node",
      "request": "launch",
      "name": "twoSum",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/57.twoSum.js"
    },
    // 55-ii.平衡二叉树
    {
      "type": "node",
      "request": "launch",
      "name": "isBalanced",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/55-ii.isBalanced.js"
    },
    // 54.二叉搜索树的第k大节点
    {
      "type": "node",
      "request": "launch",
      "name": "kthLargest",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/54.kthLargest.js"
    },
    // 53-ii.0～n-1中缺失的数字
    {
      "type": "node",
      "request": "launch",
      "name": "missingNumber",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/53-ii.missingNumber.js"
    },
    // 53-i.在排序数组中查找数字
    {
      "type": "node",
      "request": "launch",
      "name": "search",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/53-i.search.js"
    },
    // 52.两个链表的第一个公共节点
    {
      "type": "node",
      "request": "launch",
      "name": "getIntersectionNode",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/52.getIntersectionNode.js"
    },
    // 42.第一个只出现一次的字符
    {
      "type": "node",
      "request": "launch",
      "name": "firstUniqChar",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/50.firstUniqChar.js"
    },
    // 42.连续子数组的最大和
    {
      "type": "node",
      "request": "launch",
      "name": "maxSubArray",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/42.maxSubArray.js"
    },
    // 40.最小的k个数
    {
      "type": "node",
      "request": "launch",
      "name": "getLeastNumbers",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/40.getLeastNumbers.js"
    },
    // 28.对称的二叉树
    {
      "type": "node",
      "request": "launch",
      "name": "isSymmetric",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/offer/28.isSymmetric.js"
    },
    // 27.二叉树的镜像
    {
      "type": "node",
      "request": "launch",
      "name": "mirrorTree",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/offer/27.mirrorTree.js"
    },
    // 25.合并两个排序的链表
    {
      "type": "node",
      "request": "launch",
      "name": "mergeTwoLists",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/offer/25.mergeTwoLists.js"
    },
    // 21.调整数组顺序使奇数位于偶数前面
    {
      "type": "node",
      "request": "launch",
      "name": "exchange",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/21.exchange.js"
    },
    // 18.删除链表的节点
    {
      "type": "node",
      "request": "launch",
      "name": "deleteNode",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/offer/18.deleteNode.js"
    },
    // 17.打印从1到最大的n位数
    {
      "type": "node",
      "request": "launch",
      "name": "printNumbers",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/17.printNumbers.js"
    },
    // 10-ii.青蛙跳台阶问题
    {
      "type": "node",
      "request": "launch",
      "name": "numWays",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/10-ii.numWays.js"
    },
    // 10-i.斐波那契数列
    {
      "type": "node",
      "request": "launch",
      "name": "fibonacci",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/10-i.fibonacci.js"
    },
    // 06.从尾到头打印链表
    {
      "type": "node",
      "request": "launch",
      "name": "reversePrint",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/offer/06.reversePrint.js"
    },
    // 03.数组中重复的数字
    {
      "type": "node",
      "request": "launch",
      "name": "findRepeatNumber",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\offer/03.findRepeatNumber.js"
    },
    /** ------------------------主站------------------------*/

    // 235.二叉搜索树的最近公共祖先
    {
      "type": "node",
      "request": "launch",
      "name": "lowestCommonAncestor",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/main/235.lowestCommonAncestor.js"
    },
    // 位1的个数
    {
      "type": "node",
      "request": "launch",
      "name": "hammingWeight",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/main/191.hammingWeight.js"
    },
    // 231.2的幂
    {
      "type": "node",
      "request": "launch",
      "name": "isPowerOfTwo",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}\\main/231.isPowerOfTwo.js"
    },
    // 69.x 的平方根
    {
      "type": "node",
      "request": "launch",
      "name": "mySqrt",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/main/69.mySqrt.js"
    },
    // 36.有效的数独
    {
      "type": "node",
      "request": "launch",
      "name": "isValidSudoku",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/main/36.isValidSudoku.js"
    },
    // 22.生成有效括号组合
    {
      "type": "node",
      "request": "launch",
      "name": "generateParenthesis",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/main/22.generateParenthesis.js"
    },
    // 111.二叉树的最小深度
    {
      "type": "node",
      "request": "launch",
      "name": "minDepth",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/111.minDepth.js"
    },
    // 104.二叉树的最大深度
    {
      "type": "node",
      "request": "launch",
      "name": "maxDepth",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/104.maxDepth.js"
    },
    // 102.二叉树的层序遍历
    {
      "type": "node",
      "request": "launch",
      "name": "levelOrder",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/main/102.levelOrder.js"
    },
    // 买卖股票的最佳时机 II
    {
      "type": "node",
      "request": "launch",
      "name": "maxProfit",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/main/122.maxProfit.js"
    },
    // 169.多数元素
    {
      "type": "node",
      "request": "launch",
      "name": "majorityElement",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/169.majorityElement.js"
    },
    // 50.计算 x 的 n 次幂函数
    {
      "type": "node",
      "request": "launch",
      "name": "myPow",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/50.myPow.js"
    },
    // 98.验证二叉搜索树
    {
      "type": "node",
      "request": "launch",
      "name": "isValidBST",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/98.isValidBST.js"
    },
    // 1.两数之和
    {
      "type": "node",
      "request": "launch",
      "name": "twoSum",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/1.twoSum.js"
    },
    // 242.有效的括号
    {
      "type": "node",
      "request": "launch",
      "name": "isAnagram",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/242.isAnagram.js"
    },
    // 20.有效的括号
    {
      "type": "node",
      "request": "launch",
      "name": "isValid",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/20.isValid.js"
    },
    // 141.环形链表
    {
      "type": "node",
      "request": "launch",
      "name": "hasCycle",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/141.hasCycle.js"
    },
    // 24.两两交换链表中的节点
    {
      "type": "node",
      "request": "launch",
      "name": "swapPairs",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/24.swapPairs.js"
    },
    // 206.反转链表
    {
      "type": "node",
      "request": "launch",
      "name": "reverseList",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "program": "${workspaceRoot}/main/206.reverseList.js"
    },
  ]
}